{"version":3,"sources":["containers/Layout.js","components/Product.js","containers/ProductListView.js","containers/ProductDetailView.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","CustomLayout","props","className","theme","mode","defaultSelectedKeys","Item","key","style","padding","margin","to","children","textAlign","Products","itemLayout","size","pagination","onChange","page","console","log","pageSize","dataSource","data","renderItem","item","title","actions","SmileOutlined","type","text","extra","width","alt","src","image","Meta","avatar","href","id","description","price","ProductList","state","products","fetchProducts","axios","get","then","res","setState","this","newProps","token","Product","React","Component","ProductDetail","product","match","params","summary","url","BaseRouter","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c7b1e98.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport {Link} from 'react-router-dom';\nconst { Header, Content, Footer } = Layout;\n\nconst CustomLayout = (props) => {\n    return (\n        <Layout className=\"layout\">\n            <Header>\n                <div className=\"logo\" />\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n                    <Menu.Item key=\"1\">nav 1</Menu.Item>\n                    <Menu.Item key=\"2\">nav 2</Menu.Item>\n                    <Menu.Item key=\"3\">nav 3</Menu.Item>\n                </Menu>\n            </Header>\n            <Content style={{ padding: '0 50px' }}>\n                <Breadcrumb style={{ margin: '16px 0' }}>\n                    <Breadcrumb.Item><Link to =\"/\"> Home </Link></Breadcrumb.Item>\n                    <Breadcrumb.Item><Link to = \"/\"> List </Link></Breadcrumb.Item>\n                </Breadcrumb>\n                    <div className=\"site-layout-content\">\n                        {props.children}\n                    </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Ant Design Â©2018 Created by Ant UED</Footer>\n        </Layout>\n    );\n}\n\nexport default CustomLayout;\n","import React from 'react';\nimport {List, Avatar, Card} from \"antd\";\nimport { SmileOutlined } from '@ant-design/icons';\n\n\nconst Products = props => {\n    return (\n        <List\n            itemLayout=\"vertical\"\n            size=\"large\"\n            pagination={{\n                onChange: page => {\n                    console.log(page);\n                },\n                pageSize: 3\n            }}\n            dataSource={props.data}\n            renderItem={item => (\n                <List.Item\n                    key={item.title}\n                    actions={[\n                        <SmileOutlined type=\"star-o\" text=\"156\" />,\n                        <SmileOutlined type=\"like-o\" text=\"156\" />,\n                        <SmileOutlined type=\"message\" text=\"2\" />\n                    ]}\n\n                extra={\n                        <img\n                            width={272}\n                            alt=\"logo\"\n                            // src=\"https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png\"\n                            src = {item.image}\n                        />\n                    }\n                >\n                    <List.Item.Meta\n                        avatar={<Avatar src={item.avatar} />}\n                        title={<a href={`/${item.id}/`}> {item.title} </a>}\n                        description={item.description}\n                    />\n                    {item.price}\n                </List.Item>\n            )}\n        />\n    );\n};\n\nexport default Products;\n","import Products from \"../components/Product\";\nimport React from \"react\";\nimport CustomForm from \"../components/Form\";\nimport axios from \"axios\";\n\n\nclass ProductList extends React.Component {\n    state = {\n        products: []\n    };\n\n    fetchProducts = () => {\n        axios.get(\"http://127.0.0.1:8000/api/products/\").then(res => {\n            this.setState({\n                products: res.data\n            });\n            console.log(res.data)\n        });\n    }\n\n    componentDidMount() {\n        this.fetchProducts();\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.token) {\n            this.fetchProducts();\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Products data={this.state.products} /> <br />\n                <h2> Create a Product </h2>\n            </div>\n        );\n    }\n}\n\nexport default ProductList;\n\n","import React from \"react\";\nimport axios from \"axios\";\nimport {Card} from 'antd';\n\nclass ProductDetail extends React.Component {\n    state = {\n        product: {}\n    };\n\n    componentDidMount() {\n        const id = this.props.match.params.id;\n        axios.get(`http://127.0.0.1:8000/api/products/${id}/`).then(res => {\n            this.setState({\n                product: res.data\n            });\n        });\n    }\n    render() {\n        return (\n            <Card title = {this.state.product.title}>\n                <p> {this.state.product.description} </p>\n                <p> {this.state.product.summary} </p>\n                <p> {this.state.product.price} </p>\n                <img width={272} src={this.state.product.image}  alt=\"image\"/>\n                <p> {this.state.product.url}</p>\n            </Card>\n        );\n    }\n}\n\nexport default ProductDetail;\n\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport ProductList from \"./containers/ProductListView\";\nimport ProductDetail from \"./containers/ProductDetailView\";\n\nconst BaseRouter = () => (\n    <div>\n        <Route exact path=\"/\" component={ProductList} />{\" \"}\n        <Route exact path=\"/:id\" component={ProductDetail} />{\" \"}\n    </div>\n);\n\nexport default BaseRouter;\n","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport CustomLayout from \"./containers/Layout\";\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport BaseRouter from \"./routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router>\n          <CustomLayout>\n              <BaseRouter/>\n          </CustomLayout>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}